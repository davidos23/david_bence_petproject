#Becslés
pred_RF<- predict(RF_best,heart_test_RF_best,type="response")
#Eredmények feljegyzése
cfm_RF_best <- confusionMatrix(data = factor(pred_RF), reference = factor(heart_test_RF_best$HeartDisease), mode = "prec_recall")
RF_Accuracy <- rbind(RF_Accuracy,cfm_RF_best$overall[1])
RF_Precision <- rbind(RF_Precision,cfm_RF_best$byClass[5])
RF_Recall <- rbind(RF_Recall,cfm_RF_best$byClass[6])
RF_F1 <- rbind(RF_F1,cfm_RF_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(RF_Accuracy,RF_Precision, RF_Recall, RF_F1)[2:length(RF_Accuracy),]
average_metrics_RF_best <- apply(metrics,2,mean)
average_metrics_RF_best
summary_metrics <- rbind(average_metrics_ensemble,average_metrics_RF_best,average_metrics_ANN_best)
summary_metrics
#dplyr ( %>% miatt)
library(dplyr)
#ANN
library(neuralnet)
library(nnet)
library(fastDummies)
library(caret)
library(cvms)
#RF
library(randomForest)
#LOGIT
library(car)
norm <- function(x) (x-min(x))/(max(x)-min(x))
classifier <- function(x,cut_off=0.5) {
if(x < cut_off){
return(0)
} else {
return(1)
}
}
library(readr)
heart <- read_csv("heart.csv")
set.seed(2021)
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index <- createDataPartition(heart_with_dummies$HeartDisease,p=0.7,list = FALSE)
heart_train <- heart_with_dummies[train_index,]
heart_test <- heart_with_dummies[-train_index,]
logit_all <- glm(as.factor(HeartDisease)~., data=heart_train, family = binomial(link="logit"),)
library(broom)
summary(logit_all)
vif(logit_selected)
vif(logit_all)
logit_all <- glm(as.factor(HeartDisease)~., data=heart_train, family = binomial(link="logit"),)
library(broom)
summary(logit_all)
vif(logit_all)
#dplyr ( %>% miatt)
library(dplyr)
#ANN
library(neuralnet)
library(nnet)
library(fastDummies)
library(caret)
library(cvms)
#RF
library(randomForest)
#LOGIT
library(car)
norm <- function(x) (x-min(x))/(max(x)-min(x))
classifier <- function(x,cut_off=0.5) {
if(x < cut_off){
return(0)
} else {
return(1)
}
}
library(readr)
heart <- read_csv("heart.csv")
set.seed(2021)
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index <- createDataPartition(heart_with_dummies$HeartDisease,p=0.7,list = FALSE)
heart_train <- heart_with_dummies[train_index,]
heart_test <- heart_with_dummies[-train_index,]
logit_all <- glm(as.factor(HeartDisease)~., data=heart_train, family = binomial(link="logit"),)
library(broom)
summary(logit_all)
vif(logit_all)
set.seed(2021)
heart <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index <- createDataPartition(heart$HeartDisease,p=0.7,list = FALSE)
heart_train <- heart[train_index,]
heart_test <- heart[-train_index,]
logit_all <- glm(as.factor(HeartDisease)~., data=heart, family = binomial(link="logit"),)
library(broom)
summary(logit_all)
vif(logit_all)
set.seed(2021)
heart <- dummy_cols(heart, remove_selected_columns = TRUE)
#dplyr ( %>% miatt)
library(dplyr)
#ANN
library(neuralnet)
library(nnet)
library(fastDummies)
library(caret)
library(cvms)
#RF
library(randomForest)
#LOGIT
library(car)
norm <- function(x) (x-min(x))/(max(x)-min(x))
classifier <- function(x,cut_off=0.5) {
if(x < cut_off){
return(0)
} else {
return(1)
}
}
library(readr)
heart <- read_csv("heart.csv")
set.seed(2021)
heart <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index <- createDataPartition(heart$HeartDisease,p=0.7,list = FALSE)
heart_train <- heart[train_index,]
heart_test <- heart[-train_index,]
#dplyr ( %>% miatt)
library(dplyr)
#ANN
library(neuralnet)
library(nnet)
library(fastDummies)
library(caret)
library(cvms)
#RF
library(randomForest)
#LOGIT
library(car)
norm <- function(x) (x-min(x))/(max(x)-min(x))
classifier <- function(x,cut_off=0.5) {
if(x < cut_off){
return(0)
} else {
return(1)
}
}
library(readr)
heart <- read_csv("heart.csv")
set.seed(2021)
train_index <- createDataPartition(heart$HeartDisease,p=0.7,list = FALSE)
heart_train <- heart[train_index,]
heart_test <- heart[-train_index,]
logit_all <- glm(as.factor(HeartDisease)~., data=heart, family = binomial(link="logit"),)
library(broom)
summary(logit_all)
vif(logit_all)
K=1000
logit_vilagallapot = sample(1,10000,K)
logit_Accuracy = array()
logit_Precision = array()
logit_Recall = array()
logit_F1 = array()
for (i in 1:K){
set.seed(logit_vilagallapot[i])
logit_selected <- glm(as.factor(HeartDisease)~Sex_F+ChestPainType_ATA+ChestPainType_NAP+ChestPainType_TA+Cholesterol+FastingBS+ExerciseAngina_Y+Oldpeak+ST_Slope_Up+ST_Slope_Flat, data=heart_train, family = binomial(link="logit"))
pred_logit <- predict(logit_selected,heart_test,type="response") %>% round(3)
pred_logit <- sapply(pred,classifier,cut_off=selected_cut_off)
cfm_logit <- confusionMatrix(data = factor(pred_logit), reference = factor(heart_test$HeartDisease), mode = "prec_recall")
logit_Accuracy <- rbind(logit_Accuracy,cfm_logit$overall[1])
logit_Precision <- rbind(logit_Precision,cfm_logit$byClass[5])
logit_Recall <- rbind(logit_Recall,cfm_logit$byClass[6])
logit_F1 <- rbind(logit_F1,cfm_logit$byClass[7])
print(paste0(i*100/K))
}
K=1000
logit_vilagallapot = sample(1,10000,K)
logit_Accuracy = array()
logit_Precision = array()
logit_Recall = array()
logit_F1 = array()
for (i in 1:K){
set.seed(logit_vilagallapot[i])
logit_selected <- glm(as.factor(HeartDisease)~Sex+ChestPainType+Cholesterol+FastingBS+ExerciseAngina+Oldpeak+ST_Slope, data=heart_train, family = binomial(link="logit"))
pred_logit <- predict(logit_selected,heart_test,type="response") %>% round(3)
pred_logit <- sapply(pred,classifier,cut_off=selected_cut_off)
cfm_logit <- confusionMatrix(data = factor(pred_logit), reference = factor(heart_test$HeartDisease), mode = "prec_recall")
logit_Accuracy <- rbind(logit_Accuracy,cfm_logit$overall[1])
logit_Precision <- rbind(logit_Precision,cfm_logit$byClass[5])
logit_Recall <- rbind(logit_Recall,cfm_logit$byClass[6])
logit_F1 <- rbind(logit_F1,cfm_logit$byClass[7])
print(paste0(i*100/K))
}
K=1000
logit_vilagallapot = sample(1,10000,K)
logit_Accuracy = array()
logit_Precision = array()
logit_Recall = array()
logit_F1 = array()
for (i in 1:K){
set.seed(logit_vilagallapot[i])
logit_selected <- glm(as.factor(HeartDisease)~Sex+ChestPainType+Cholesterol+FastingBS+ExerciseAngina+Oldpeak+ST_Slope, data=heart_train, family = binomial(link="logit"))
pred_logit <- predict(logit_selected,heart_test,type="response") %>% round(3)
pred_logit <- sapply(pred_logit,classifier,cut_off=selected_cut_off)
cfm_logit <- confusionMatrix(data = factor(pred_logit), reference = factor(heart_test$HeartDisease), mode = "prec_recall")
logit_Accuracy <- rbind(logit_Accuracy,cfm_logit$overall[1])
logit_Precision <- rbind(logit_Precision,cfm_logit$byClass[5])
logit_Recall <- rbind(logit_Recall,cfm_logit$byClass[6])
logit_F1 <- rbind(logit_F1,cfm_logit$byClass[7])
print(paste0(i*100/K))
}
K=1000
logit_vilagallapot = sample(1,10000,K)
logit_Accuracy = array()
logit_Precision = array()
logit_Recall = array()
logit_F1 = array()
for (i in 1:K){
set.seed(logit_vilagallapot[i])
logit_selected <- glm(as.factor(HeartDisease)~Sex+ChestPainType+Cholesterol+FastingBS+ExerciseAngina+Oldpeak+ST_Slope, data=heart_train, family = binomial(link="logit"))
pred_logit <- predict(logit_selected,heart_test,type="response") %>% round(3)
pred_logit <- sapply(pred_logit,classifier,cut_off=0.5)
cfm_logit <- confusionMatrix(data = factor(pred_logit), reference = factor(heart_test$HeartDisease), mode = "prec_recall")
logit_Accuracy <- rbind(logit_Accuracy,cfm_logit$overall[1])
logit_Precision <- rbind(logit_Precision,cfm_logit$byClass[5])
logit_Recall <- rbind(logit_Recall,cfm_logit$byClass[6])
logit_F1 <- rbind(logit_F1,cfm_logit$byClass[7])
print(paste0(i*100/K))
}
metrics_logit <- cbind(logit_Accuracy,logit_Precision, logit_Recall, logit_F1)[2:length(logit_Accuracy),]
average_metrics_logit <- apply(metrics_logit,2,mean)
as.data.frame(average_metrics_logit)
#Első felosztás
#(Az adatoknak szétosztása 80-20%-ra)
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index_1 <- createDataPartition(heart_with_dummies$HeartDisease,p=0.8,list = FALSE)
heart_train_alap <- heart_with_dummies[train_index_1,]
heart_test_meta <- heart_with_dummies[-train_index_1,]
#Az adatok első felének felosztása az alapmodellek trainelésére
#(Azaz adatoknak a 80%-ának szétosztása 50-30%-ra)
train_index_2 <- createDataPartition(heart_train_alap$HeartDisease,p=0.625,list = FALSE)
heart_test_alap <- heart_train_alap[-train_index_2,]
heart_train_meta <- heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
heart_train_alap <- heart_train_alap[train_index_2,]
ANN_heart_with_dummies <- sapply(heart_with_dummies,norm) #alap sokaság normálása
#Első felosztás
#(Az adatoknak szétosztása 80-20%-ra)
ANN_heart_train_alap <- ANN_heart_with_dummies[train_index_1,]
ANN_heart_test_meta <- ANN_heart_with_dummies[-train_index_1,]
#Az adatok első felének felosztása az alapmodellek trainelésére
#(Azaz adatoknak a 80%-ának szétosztása 50-30%-ra)
ANN_heart_test_alap <- ANN_heart_train_alap[-train_index_2,]
ANN_heart_train_meta <- ANN_heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
ANN_heart_train_alap <- ANN_heart_train_alap[train_index_2,]
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = ANN_heart_train_alap, hidden = c(1,1), linear.output = FALSE)
logit_selected <- glm(as.factor(HeartDisease)~Sex_F+ChestPainType_ATA+ChestPainType_NAP+ChestPainType_TA+Cholesterol+FastingBS+ExerciseAngina_Y+Oldpeak+ST_Slope_Up+ST_Slope_Flat, data=heart_train_alap, family = binomial(link="logit"))
RF_best <- randomForest(as.factor(HeartDisease)~., data=heart_train_alap,mtry=3,maxnodes=13,ntree=10)
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_alap)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_alap,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- predict(RF_best,heart_test_alap,type="response")
pred_RF <- as.numeric(levels(pred_RF))[pred_RF]
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_train_meta <- cbind(heart_train_meta,pred_ANN,pred_logit,pred_RF)
ensemble <- neuralnet(as.factor(HeartDisease)~., data=heart_train_meta, hidden = 3, linear.output = FALSE)
plot(ensemble)
#Először a 3 alapmodell becsül:
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_meta)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_meta,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- predict(RF_best,heart_test_meta,type="response")
pred_RF <- as.numeric(levels(pred_RF))[pred_RF]
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_test_ensemble <- cbind(ANN_heart_test_meta,pred_ANN,pred_logit,pred_RF)
pred_ensemble <- predict(ensemble,heart_test_ensemble,type="response")[,2] %>% round(3)
pred_ensemble <- as.numeric(sapply(pred_ensemble,classifier,cut_off=0.5))
conf_matrix<- tibble("prediction"=pred_ensemble,"target_var" = heart_test_meta$HeartDisease) %>%
table() %>%
as_tibble() %>%
plot_confusion_matrix(prediction_col = "prediction",
target_col = "target_var",
counts_col = "n",
class_order = c("1","0"))
conf_matrix
K=30
vilagallapotok = sample(1:5000,K)
ensemble_Accuracy = array()
ensemble_Precision = array()
ensemble_Recall = array()
ensemble_F1 = array()
for (i in 1:K){
set.seed(vilagallapotok[i])
#_________________________________________________
#____________ADATOK FELOSZTÁSA_______________________
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index_1 <- createDataPartition(heart_with_dummies$HeartDisease,p=0.8,list = FALSE)
heart_train_alap <- heart_with_dummies[train_index_1,]
heart_test_meta <- heart_with_dummies[-train_index_1,]
train_index_2 <- createDataPartition(heart_train_alap$HeartDisease,p=0.625,list = FALSE)
heart_test_alap <- heart_train_alap[-train_index_2,]
heart_train_meta <- heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
heart_train_alap <- heart_train_alap[train_index_2,]
#__________ANN alapmodellhez normálás_________
ANN_heart_with_dummies <- sapply(heart_with_dummies,norm) #alap sokaság normálása
ANN_heart_train_alap <- ANN_heart_with_dummies[train_index_1,]
ANN_heart_test_meta <- ANN_heart_with_dummies[-train_index_1,]
ANN_heart_test_alap <- ANN_heart_train_alap[-train_index_2,]
ANN_heart_train_meta <- ANN_heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
ANN_heart_train_alap <- ANN_heart_train_alap[train_index_2,]
#________________________________________________
#_______MODELLEK TANÍTÁSA________________________
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = ANN_heart_train_alap, hidden = c(1,1), linear.output = FALSE)
logit_selected <- glm(as.factor(HeartDisease)~Sex_F+ChestPainType_ATA+ChestPainType_NAP+ChestPainType_TA+Cholesterol+FastingBS+ExerciseAngina_Y+Oldpeak+ST_Slope_Up+ST_Slope_Flat, data=heart_train_alap, family = binomial(link="logit"))
RF_best <- randomForest(as.factor(HeartDisease)~., data=heart_train_alap,mtry=3,maxnodes=13,ntree=10)
#________________________________________________
#_______Alapmodell becslések a középső 30%-on_____
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_alap)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_alap,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_alap,type="response"))
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_train_meta <- cbind(heart_train_meta,pred_ANN,pred_logit,pred_RF)
#__________________________________________________________
#_______A METAMODELL TANÍTÁSA_____________________________
#Logit meta:
#ensemble <- glm(as.factor(HeartDisease)~., data=heart_train_meta, family = binomial(link="logit"))
#ANN meta:
ensemble <- neuralnet(as.factor(HeartDisease)~., data=heart_train_meta, hidden = 3, linear.output = FALSE)
#__________________________________________________________
#_______BECSLÉS AZ UTSÓ 20%-ON________________________
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_meta)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_meta,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_meta,type="response"))
#ENSEMBLE BECSLÉS
heart_test_ensemble <- cbind(heart_test_meta[,7],pred_ANN,pred_logit,pred_RF)
pred_ensemble <- predict(ensemble,heart_test_ensemble,type="response") %>% round(3)
pred_ensemble <- as.numeric(sapply(pred_ensemble[,2],classifier,cut_off=0.5))
cfm_ensemble <- confusionMatrix(data = factor(pred_ensemble), reference = factor(heart_test_ensemble$HeartDisease), mode = "prec_recall")
ensemble_Accuracy <- rbind(ensemble_Accuracy,cfm_ensemble$overall[1])
ensemble_Precision <- rbind(ensemble_Precision,cfm_ensemble$byClass[5])
ensemble_Recall <- rbind(ensemble_Recall,cfm_ensemble$byClass[6])
ensemble_F1 <- rbind(ensemble_F1,cfm_ensemble$byClass[7])
}, error=function(e){})
print(paste0(i*100/K,"%"))
}
metrics_ensemble <- cbind(ensemble_Accuracy,ensemble_Precision, ensemble_Recall, ensemble_F1)[2:length(ensemble_Accuracy),]
average_metrics_ensemble <- apply(metrics_ensemble,2,mean)
ANN_Accuracy = array()
ANN_Precision = array()
ANN_Recall = array()
ANN_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Normálás és splittelés
train_index_ANN_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_kesz_train_ANN_best <- ANN_heart_with_dummies[train_index_ANN_best,]
heart_kesz_test_ANN_best <- ANN_heart_with_dummies[-train_index_ANN_best,]
#Neurális háló tanítása
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train_ANN_best,hidden=c(1,1),linear.output = FALSE)
#Becslés
pred_ANN_best <- predict(ANN_best,heart_kesz_test_ANN_best)[,2] %>% round(3)
pred_ANN_best <- sapply(pred_ANN_best,classifier,cut_off=0.5)
#Eredmények feljegyzése
cfm_ANN_best <- confusionMatrix(data = factor(pred_ANN_best), reference = factor(heart_kesz_test_ANN_best[,7]), mode = "prec_recall")
ANN_Accuracy <- rbind(ANN_Accuracy,cfm_ANN_best$overall[1])
ANN_Precision <- rbind(ANN_Precision,cfm_ANN_best$byClass[5])
ANN_Recall <- rbind(ANN_Recall,cfm_ANN_best$byClass[6])
ANN_F1 <- rbind(ANN_F1,cfm_ANN_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(ANN_Accuracy,ANN_Precision, ANN_Recall, ANN_F1)[2:length(ANN_Accuracy),]
average_metrics_ANN_best <- apply(metrics,2,mean,na.rm=TRUE)
average_metrics_ANN_best
RF_Accuracy = array()
RF_Precision = array()
RF_Recall = array()
RF_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Splittelés
train_index_RF_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_train_RF_best <- heart_with_dummies[train_index_RF_best,]
heart_test_RF_best <- heart_with_dummies[-train_index_RF_best,]
#Neurális háló tanítása
tryCatch({
RF_best <- randomForest(as.factor(HeartDisease)~., data = heart_train_RF_best,mtry=3,maxnodes=13,ntree=10)
#Becslés
pred_RF<- predict(RF_best,heart_test_RF_best,type="response")
#Eredmények feljegyzése
cfm_RF_best <- confusionMatrix(data = factor(pred_RF), reference = factor(heart_test_RF_best$HeartDisease), mode = "prec_recall")
RF_Accuracy <- rbind(RF_Accuracy,cfm_RF_best$overall[1])
RF_Precision <- rbind(RF_Precision,cfm_RF_best$byClass[5])
RF_Recall <- rbind(RF_Recall,cfm_RF_best$byClass[6])
RF_F1 <- rbind(RF_F1,cfm_RF_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(RF_Accuracy,RF_Precision, RF_Recall, RF_F1)[2:length(RF_Accuracy),]
average_metrics_RF_best <- apply(metrics,2,mean)
average_metrics_RF_best
summary_metrics <- rbind(average_metrics_ensemble,average_metrics_RF_best,average_metrics_ANN_best)
summary_metrics
#dplyr ( %>% miatt)
library(dplyr)
#ANN
library(neuralnet)
library(nnet)
library(fastDummies)
library(caret)
library(cvms)
#RF
library(randomForest)
#LOGIT
library(car)
norm <- function(x) (x-min(x))/(max(x)-min(x))
classifier <- function(x,cut_off=0.5) {
if(x < cut_off){
return(0)
} else {
return(1)
}
}
library(readr)
heart <- read_csv("heart.csv")
heart_kesz <- dummy_cols(heart, remove_selected_columns = TRUE)
heart_kesz <- sapply(heart_kesz, norm) %>% data.frame()
train_index <- createDataPartition(heart_kesz$HeartDisease,p=0.7,list = FALSE)
heart_kesz_train <- heart_kesz[train_index,]
heart_kesz_test <- heart_kesz[-train_index,]
ANN <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train, hidden = c(2,5), linear.output = FALSE)
selected_cut_off=0.5
#A classifier egy az elején definiált függvény, átalakítja pred-et 0-1-esekből álló vektorrá a selected_cut_off-tól függően
pred <- predict(ANN,heart_kesz_test)[,2] %>% round(3)
pred <- sapply(pred,classifier,cut_off=selected_cut_off)
conf_matrix<- tibble("prediction"=pred,"target_var" = heart_kesz_test$HeartDisease) %>%
table() %>%
as_tibble() %>%
plot_confusion_matrix(prediction_col = "prediction",
target_col = "target_var",
counts_col = "n",
class_order = c("1","0"))
conf_matrix
cfm <- confusionMatrix(data = factor(pred), reference = factor(heart_kesz_test$HeartDisease), mode = "prec_recall")
cfm
cfm$overall[1] #Accuracy
cfm$byClass[5] #Precision
cfm$byClass[6] #Recall
cfm$byClass[7] #F1
K=100
vilagallapot <- sample(1:5000,K)
selected_cut_off=0.5 #Ez lesz a választott cut-offunk, de tapasztalatok szerint a becsült bináris adat nagyon ritkán esik túl távol 0-tól vagy 1-től, így a 0.1 vagy 0.9-es cut-off ugyanazt az eredményt nyújtja
n=4
for (neuronszam in 1:n){
ANN_Accuracy = array()
ANN_Precision = array()
ANN_Recall = array()
ANN_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapot[i])
#Splittelés
train_index_loop <- createDataPartition(heart_kesz$HeartDisease,p=0.7,list = FALSE)
heart_kesz_train_loop <- heart_kesz[train_index_loop,]
heart_kesz_test_loop <- heart_kesz[-train_index_loop,]
#Neurális háló tanítása
tryCatch({
ANN_looped <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train_loop,hidden=neuronszam,linear.output = FALSE,stepmax=100000,learningrate = 0.1)
#Becslés
pred_loop <- predict(ANN_looped,heart_kesz_test_loop)[,2] %>% round(3)
pred_loop <- sapply(pred_loop,classifier,cut_off=selected_cut_off)
#Eredmények feljegyzése
cfm_looped <- confusionMatrix(data = factor(pred_loop), reference = factor(heart_kesz_test_loop$HeartDisease), mode = "prec_recall")
ANN_Accuracy <- rbind(ANN_Accuracy,cfm_looped$overall[1])
ANN_Precision <- rbind(ANN_Precision,cfm_looped$byClass[5])
ANN_Recall <- rbind(ANN_Recall,cfm_looped$byClass[6])
ANN_F1 <- rbind(ANN_F1,cfm_looped$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%, n = ", neuronszam))
}
#K soros mérőszám mátrix:
metrics <- cbind(ANN_Accuracy,ANN_Precision, ANN_Recall, ANN_F1)[2:length(ANN_Accuracy),]
#A K sor átlaga - egy sorvektor:
if (neuronszam == 1)
{average_metrics_1 <- apply(metrics,2,mean,na.rm=TRUE)}else if(neuronszam==2)
{average_metrics_2 <- apply(metrics,2,mean,na.rm=TRUE)}else if(neuronszam==3)
{average_metrics_3 <- apply(metrics,2,mean,na.rm=TRUE)}else
{average_metrics_4 <- apply(metrics,2,mean,na.rm=TRUE)}
}
average_metrics_1layer <- rbind(average_metrics_1,average_metrics_2,average_metrics_3,average_metrics_4)
