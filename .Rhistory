pred_RF<- as.numeric(predict(RF_best,heart_test_alap,type="response"))
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_train_meta <- cbind(heart_train_meta,pred_ANN,pred_logit,pred_RF)
#__________________________________________________________
#_______A METAMODELL TANÍTÁSA_____________________________
#Logit meta:
#ensemble <- glm(as.factor(HeartDisease)~., data=heart_train_meta, family = binomial(link="logit"))
#ANN meta:
ensemble <- neuralnet(as.factor(HeartDisease)~., data=heart_train_meta, hidden = 3, linear.output = FALSE)
#__________________________________________________________
#_______BECSLÉS AZ UTSÓ 20%-ON________________________
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_meta)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_meta,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_meta,type="response"))
#ENSEMBLE BECSLÉS
heart_test_ensemble <- cbind(heart_test_meta[,7],pred_ANN,pred_logit,pred_RF)
pred_ensemble <- predict(ensemble,heart_test_ensemble,type="response") %>% round(3)
pred_ensemble <- as.numeric(sapply(pred_ensemble[,2],classifier,cut_off=0.5))
cfm_ensemble <- confusionMatrix(data = factor(pred_ensemble), reference = factor(heart_test_ensemble$HeartDisease), mode = "prec_recall")
ensemble_Accuracy <- rbind(ensemble_Accuracy,cfm_ensemble$overall[1])
ensemble_Precision <- rbind(ensemble_Precision,cfm_ensemble$byClass[5])
ensemble_Recall <- rbind(ensemble_Recall,cfm_ensemble$byClass[6])
ensemble_F1 <- rbind(ensemble_F1,cfm_ensemble$byClass[7])
}, error=function(e){})
print(paste0(i*100/K,"%"))
}
metrics_ensemble <- cbind(ensemble_Accuracy,ensemble_Precision, ensemble_Recall, ensemble_F1)[2:length(ensemble_Accuracy),]
average_metrics_ensemble <- apply(metrics_ensemble,2,mean)
ANN_Accuracy = array()
ANN_Precision = array()
ANN_Recall = array()
ANN_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Normálás és splittelés
train_index_ANN_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_kesz_train_ANN_best <- ANN_heart_with_dummies[train_index_ANN_best,]
heart_kesz_test_ANN_best <- ANN_heart_with_dummies[-train_index_ANN_best,]
#Neurális háló tanítása
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train_ANN_best,hidden=c(1,1),linear.output = FALSE)
#Becslés
pred_ANN_best <- predict(ANN_best,heart_kesz_test_ANN_best)[,2] %>% round(3)
pred_ANN_best <- sapply(pred_ANN_best,classifier,cut_off=0.5)
#Eredmények feljegyzése
cfm_ANN_best <- confusionMatrix(data = factor(pred_ANN_best), reference = factor(heart_kesz_test_ANN_best[,7]), mode = "prec_recall")
ANN_Accuracy <- rbind(ANN_Accuracy,cfm_ANN_best$overall[1])
ANN_Precision <- rbind(ANN_Precision,cfm_ANN_best$byClass[5])
ANN_Recall <- rbind(ANN_Recall,cfm_ANN_best$byClass[6])
ANN_F1 <- rbind(ANN_F1,cfm_ANN_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(ANN_Accuracy,ANN_Precision, ANN_Recall, ANN_F1)[2:length(ANN_Accuracy),]
average_metrics_ANN_best <- apply(metrics,2,mean,na.rm=TRUE)
average_metrics_ANN_best
RF_Accuracy = array()
RF_Precision = array()
RF_Recall = array()
RF_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Splittelés
train_index_RF_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_train_RF_best <- heart_with_dummies[train_index_RF_best,]
heart_test_RF_best <- heart_with_dummies[-train_index_RF_best,]
#Neurális háló tanítása
tryCatch({
RF_best <- randomForest(as.factor(HeartDisease)~., data = heart_train_RF_best,mtry=3,maxnodes=13,ntree=10)
#Becslés
pred_RF<- predict(RF_best,heart_test_RF_best,type="response")
#Eredmények feljegyzése
cfm_RF_best <- confusionMatrix(data = factor(pred_RF), reference = factor(heart_test_RF_best$HeartDisease), mode = "prec_recall")
RF_Accuracy <- rbind(RF_Accuracy,cfm_RF_best$overall[1])
RF_Precision <- rbind(RF_Precision,cfm_RF_best$byClass[5])
RF_Recall <- rbind(RF_Recall,cfm_RF_best$byClass[6])
RF_F1 <- rbind(RF_F1,cfm_RF_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(RF_Accuracy,RF_Precision, RF_Recall, RF_F1)[2:length(RF_Accuracy),]
average_metrics_RF_best <- apply(metrics,2,mean)
average_metrics_RF_best
summary_metrics <- rbind(average_metrics_ensemble,average_metrics_RF_best,average_metrics_ANN_best)
summary_metrics
write_xlsx(data.frame(summary_metrics),"summary.xlsx")
K=50
vilagallapotok = sample(1:5000,K)
ensemble_Accuracy = array()
ensemble_Precision = array()
ensemble_Recall = array()
ensemble_F1 = array()
for (i in 1:K){
set.seed(vilagallapotok[i])
#_________________________________________________
#____________ADATOK FELOSZTÁSA_______________________
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index_1 <- createDataPartition(heart_with_dummies$HeartDisease,p=0.8,list = FALSE)
heart_train_alap <- heart_with_dummies[train_index_1,]
heart_test_meta <- heart_with_dummies[-train_index_1,]
train_index_2 <- createDataPartition(heart_train_alap$HeartDisease,p=0.625,list = FALSE)
heart_test_alap <- heart_train_alap[-train_index_2,]
heart_train_meta <- heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
heart_train_alap <- heart_train_alap[train_index_2,]
#__________ANN alapmodellhez normálás_________
ANN_heart_with_dummies <- sapply(heart_with_dummies,norm) #alap sokaság normálása
ANN_heart_train_alap <- ANN_heart_with_dummies[train_index_1,]
ANN_heart_test_meta <- ANN_heart_with_dummies[-train_index_1,]
ANN_heart_test_alap <- ANN_heart_train_alap[-train_index_2,]
ANN_heart_train_meta <- ANN_heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
ANN_heart_train_alap <- ANN_heart_train_alap[train_index_2,]
#________________________________________________
#_______MODELLEK TANÍTÁSA________________________
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = ANN_heart_train_alap, hidden = c(1,1), linear.output = FALSE)
logit_selected <- glm(as.factor(HeartDisease)~Sex_F+ChestPainType_ATA+ChestPainType_NAP+ChestPainType_TA+Cholesterol+FastingBS+ExerciseAngina_Y+Oldpeak+ST_Slope_Up+ST_Slope_Flat, data=heart_train_alap, family = binomial(link="logit"))
RF_best <- randomForest(as.factor(HeartDisease)~., data=heart_train_alap,mtry=3,maxnodes=13,ntree=10)
#________________________________________________
#_______Alapmodell becslések a középső 30%-on_____
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_alap)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_alap,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_alap,type="response"))
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_train_meta <- cbind(heart_train_meta,pred_ANN,pred_logit,pred_RF)
#__________________________________________________________
#_______A METAMODELL TANÍTÁSA_____________________________
#Logit meta:
#ensemble <- glm(as.factor(HeartDisease)~., data=heart_train_meta, family = binomial(link="logit"))
#ANN meta:
ensemble <- neuralnet(as.factor(HeartDisease)~., data=heart_train_meta, hidden = 3, linear.output = FALSE)
#__________________________________________________________
#_______BECSLÉS AZ UTSÓ 20%-ON________________________
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_meta)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_meta,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_meta,type="response"))
#ENSEMBLE BECSLÉS
heart_test_ensemble <- cbind(heart_test_meta[,7],pred_ANN,pred_logit,pred_RF)
pred_ensemble <- predict(ensemble,heart_test_ensemble,type="response") %>% round(3)
pred_ensemble <- as.numeric(sapply(pred_ensemble[,2],classifier,cut_off=0.5))
cfm_ensemble <- confusionMatrix(data = factor(pred_ensemble), reference = factor(heart_test_ensemble$HeartDisease), mode = "prec_recall")
ensemble_Accuracy <- rbind(ensemble_Accuracy,cfm_ensemble$overall[1])
ensemble_Precision <- rbind(ensemble_Precision,cfm_ensemble$byClass[5])
ensemble_Recall <- rbind(ensemble_Recall,cfm_ensemble$byClass[6])
ensemble_F1 <- rbind(ensemble_F1,cfm_ensemble$byClass[7])
}, error=function(e){})
print(paste0(i*100/K,"%"))
}
metrics_ensemble <- cbind(ensemble_Accuracy,ensemble_Precision, ensemble_Recall, ensemble_F1)[2:length(ensemble_Accuracy),]
average_metrics_ensemble <- apply(metrics_ensemble,2,mean)
ANN_Accuracy = array()
ANN_Precision = array()
ANN_Recall = array()
ANN_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Normálás és splittelés
train_index_ANN_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_kesz_train_ANN_best <- ANN_heart_with_dummies[train_index_ANN_best,]
heart_kesz_test_ANN_best <- ANN_heart_with_dummies[-train_index_ANN_best,]
#Neurális háló tanítása
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train_ANN_best,hidden=c(1,1),linear.output = FALSE)
#Becslés
pred_ANN_best <- predict(ANN_best,heart_kesz_test_ANN_best)[,2] %>% round(3)
pred_ANN_best <- sapply(pred_ANN_best,classifier,cut_off=0.5)
#Eredmények feljegyzése
cfm_ANN_best <- confusionMatrix(data = factor(pred_ANN_best), reference = factor(heart_kesz_test_ANN_best[,7]), mode = "prec_recall")
ANN_Accuracy <- rbind(ANN_Accuracy,cfm_ANN_best$overall[1])
ANN_Precision <- rbind(ANN_Precision,cfm_ANN_best$byClass[5])
ANN_Recall <- rbind(ANN_Recall,cfm_ANN_best$byClass[6])
ANN_F1 <- rbind(ANN_F1,cfm_ANN_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(ANN_Accuracy,ANN_Precision, ANN_Recall, ANN_F1)[2:length(ANN_Accuracy),]
average_metrics_ANN_best <- apply(metrics,2,mean,na.rm=TRUE)
average_metrics_ANN_best
RF_Accuracy = array()
RF_Precision = array()
RF_Recall = array()
RF_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Splittelés
train_index_RF_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_train_RF_best <- heart_with_dummies[train_index_RF_best,]
heart_test_RF_best <- heart_with_dummies[-train_index_RF_best,]
#Neurális háló tanítása
tryCatch({
RF_best <- randomForest(as.factor(HeartDisease)~., data = heart_train_RF_best,mtry=3,maxnodes=13,ntree=10)
#Becslés
pred_RF<- predict(RF_best,heart_test_RF_best,type="response")
#Eredmények feljegyzése
cfm_RF_best <- confusionMatrix(data = factor(pred_RF), reference = factor(heart_test_RF_best$HeartDisease), mode = "prec_recall")
RF_Accuracy <- rbind(RF_Accuracy,cfm_RF_best$overall[1])
RF_Precision <- rbind(RF_Precision,cfm_RF_best$byClass[5])
RF_Recall <- rbind(RF_Recall,cfm_RF_best$byClass[6])
RF_F1 <- rbind(RF_F1,cfm_RF_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(RF_Accuracy,RF_Precision, RF_Recall, RF_F1)[2:length(RF_Accuracy),]
average_metrics_RF_best <- apply(metrics,2,mean)
average_metrics_RF_best
summary_metrics <- rbind(average_metrics_ensemble,average_metrics_RF_best,average_metrics_ANN_best)
summary_metrics
write_xlsx(data.frame(summary_metrics),"summary.xlsx")
K=30
vilagallapotok = sample(1:5000,K)
ensemble_Accuracy = array()
ensemble_Precision = array()
ensemble_Recall = array()
ensemble_F1 = array()
for (i in 1:K){
set.seed(vilagallapotok[i])
#_________________________________________________
#____________ADATOK FELOSZTÁSA_______________________
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index_1 <- createDataPartition(heart_with_dummies$HeartDisease,p=0.8,list = FALSE)
heart_train_alap <- heart_with_dummies[train_index_1,]
heart_test_meta <- heart_with_dummies[-train_index_1,]
train_index_2 <- createDataPartition(heart_train_alap$HeartDisease,p=0.625,list = FALSE)
heart_test_alap <- heart_train_alap[-train_index_2,]
heart_train_meta <- heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
heart_train_alap <- heart_train_alap[train_index_2,]
#__________ANN alapmodellhez normálás_________
ANN_heart_with_dummies <- sapply(heart_with_dummies,norm) #alap sokaság normálása
ANN_heart_train_alap <- ANN_heart_with_dummies[train_index_1,]
ANN_heart_test_meta <- ANN_heart_with_dummies[-train_index_1,]
ANN_heart_test_alap <- ANN_heart_train_alap[-train_index_2,]
ANN_heart_train_meta <- ANN_heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
ANN_heart_train_alap <- ANN_heart_train_alap[train_index_2,]
#________________________________________________
#_______MODELLEK TANÍTÁSA________________________
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = ANN_heart_train_alap, hidden = c(1,1), linear.output = FALSE)
logit_selected <- glm(as.factor(HeartDisease)~Sex_F+ChestPainType_ATA+ChestPainType_NAP+ChestPainType_TA+Cholesterol+FastingBS+ExerciseAngina_Y+Oldpeak+ST_Slope_Up+ST_Slope_Flat, data=heart_train_alap, family = binomial(link="logit"))
RF_best <- randomForest(as.factor(HeartDisease)~., data=heart_train_alap,mtry=3,maxnodes=13,ntree=10)
#________________________________________________
#_______Alapmodell becslések a középső 30%-on_____
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_alap)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_alap,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_alap,type="response"))
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_train_meta <- cbind(heart_train_meta,pred_ANN,pred_logit,pred_RF)
#__________________________________________________________
#_______A METAMODELL TANÍTÁSA_____________________________
#Logit meta:
#ensemble <- glm(as.factor(HeartDisease)~., data=heart_train_meta, family = binomial(link="logit"))
#ANN meta:
ensemble <- neuralnet(as.factor(HeartDisease)~., data=heart_train_meta, hidden = 3, linear.output = FALSE)
#__________________________________________________________
#_______BECSLÉS AZ UTSÓ 20%-ON________________________
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_meta)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_meta,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_meta,type="response"))
#ENSEMBLE BECSLÉS
heart_test_ensemble <- cbind(heart_test_meta[,7],pred_ANN,pred_logit,pred_RF)
pred_ensemble <- predict(ensemble,heart_test_ensemble,type="response") %>% round(3)
pred_ensemble <- as.numeric(sapply(pred_ensemble[,2],classifier,cut_off=0.5))
cfm_ensemble <- confusionMatrix(data = factor(pred_ensemble), reference = factor(heart_test_ensemble$HeartDisease), mode = "prec_recall")
ensemble_Accuracy <- rbind(ensemble_Accuracy,cfm_ensemble$overall[1])
ensemble_Precision <- rbind(ensemble_Precision,cfm_ensemble$byClass[5])
ensemble_Recall <- rbind(ensemble_Recall,cfm_ensemble$byClass[6])
ensemble_F1 <- rbind(ensemble_F1,cfm_ensemble$byClass[7])
}, error=function(e){})
print(paste0(i*100/K,"%"))
}
metrics_ensemble <- cbind(ensemble_Accuracy,ensemble_Precision, ensemble_Recall, ensemble_F1)[2:length(ensemble_Accuracy),]
average_metrics_ensemble <- apply(metrics_ensemble,2,mean)
ANN_Accuracy = array()
ANN_Precision = array()
ANN_Recall = array()
ANN_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Normálás és splittelés
train_index_ANN_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_kesz_train_ANN_best <- ANN_heart_with_dummies[train_index_ANN_best,]
heart_kesz_test_ANN_best <- ANN_heart_with_dummies[-train_index_ANN_best,]
#Neurális háló tanítása
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train_ANN_best,hidden=c(1,1),linear.output = FALSE)
#Becslés
pred_ANN_best <- predict(ANN_best,heart_kesz_test_ANN_best)[,2] %>% round(3)
pred_ANN_best <- sapply(pred_ANN_best,classifier,cut_off=0.5)
#Eredmények feljegyzése
cfm_ANN_best <- confusionMatrix(data = factor(pred_ANN_best), reference = factor(heart_kesz_test_ANN_best[,7]), mode = "prec_recall")
ANN_Accuracy <- rbind(ANN_Accuracy,cfm_ANN_best$overall[1])
ANN_Precision <- rbind(ANN_Precision,cfm_ANN_best$byClass[5])
ANN_Recall <- rbind(ANN_Recall,cfm_ANN_best$byClass[6])
ANN_F1 <- rbind(ANN_F1,cfm_ANN_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(ANN_Accuracy,ANN_Precision, ANN_Recall, ANN_F1)[2:length(ANN_Accuracy),]
average_metrics_ANN_best <- apply(metrics,2,mean,na.rm=TRUE)
average_metrics_ANN_best
RF_Accuracy = array()
RF_Precision = array()
RF_Recall = array()
RF_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Splittelés
train_index_RF_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_train_RF_best <- heart_with_dummies[train_index_RF_best,]
heart_test_RF_best <- heart_with_dummies[-train_index_RF_best,]
#Neurális háló tanítása
tryCatch({
RF_best <- randomForest(as.factor(HeartDisease)~., data = heart_train_RF_best,mtry=3,maxnodes=13,ntree=10)
#Becslés
pred_RF<- predict(RF_best,heart_test_RF_best,type="response")
#Eredmények feljegyzése
cfm_RF_best <- confusionMatrix(data = factor(pred_RF), reference = factor(heart_test_RF_best$HeartDisease), mode = "prec_recall")
RF_Accuracy <- rbind(RF_Accuracy,cfm_RF_best$overall[1])
RF_Precision <- rbind(RF_Precision,cfm_RF_best$byClass[5])
RF_Recall <- rbind(RF_Recall,cfm_RF_best$byClass[6])
RF_F1 <- rbind(RF_F1,cfm_RF_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(RF_Accuracy,RF_Precision, RF_Recall, RF_F1)[2:length(RF_Accuracy),]
average_metrics_RF_best <- apply(metrics,2,mean)
average_metrics_RF_best
summary_metrics <- rbind(average_metrics_ensemble,average_metrics_RF_best,average_metrics_ANN_best)
summary_metrics
write_xlsx(data.frame(summary_metrics),"summary.xlsx")
K=100
vilagallapotok = sample(1:5000,K)
ensemble_Accuracy = array()
ensemble_Precision = array()
ensemble_Recall = array()
ensemble_F1 = array()
for (i in 1:K){
set.seed(vilagallapotok[i])
#_________________________________________________
#____________ADATOK FELOSZTÁSA_______________________
heart_with_dummies <- dummy_cols(heart, remove_selected_columns = TRUE)
train_index_1 <- createDataPartition(heart_with_dummies$HeartDisease,p=0.8,list = FALSE)
heart_train_alap <- heart_with_dummies[train_index_1,]
heart_test_meta <- heart_with_dummies[-train_index_1,]
train_index_2 <- createDataPartition(heart_train_alap$HeartDisease,p=0.625,list = FALSE)
heart_test_alap <- heart_train_alap[-train_index_2,]
heart_train_meta <- heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
heart_train_alap <- heart_train_alap[train_index_2,]
#__________ANN alapmodellhez normálás_________
ANN_heart_with_dummies <- sapply(heart_with_dummies,norm) #alap sokaság normálása
ANN_heart_train_alap <- ANN_heart_with_dummies[train_index_1,]
ANN_heart_test_meta <- ANN_heart_with_dummies[-train_index_1,]
ANN_heart_test_alap <- ANN_heart_train_alap[-train_index_2,]
ANN_heart_train_meta <- ANN_heart_test_alap[,7] #A metamodell tanításához csak a HeartDisease oszlopra lesz szükság
ANN_heart_train_alap <- ANN_heart_train_alap[train_index_2,]
#________________________________________________
#_______MODELLEK TANÍTÁSA________________________
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = ANN_heart_train_alap, hidden = c(1,1), linear.output = FALSE)
logit_selected <- glm(as.factor(HeartDisease)~Sex_F+ChestPainType_ATA+ChestPainType_NAP+ChestPainType_TA+Cholesterol+FastingBS+ExerciseAngina_Y+Oldpeak+ST_Slope_Up+ST_Slope_Flat, data=heart_train_alap, family = binomial(link="logit"))
RF_best <- randomForest(as.factor(HeartDisease)~., data=heart_train_alap,mtry=3,maxnodes=13,ntree=10)
#________________________________________________
#_______Alapmodell becslések a középső 30%-on_____
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_alap)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_alap,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_alap,type="response"))
#Összekötjük az igazi értékeikkel: ez lesz a metamodell tanulási halmaza
heart_train_meta <- cbind(heart_train_meta,pred_ANN,pred_logit,pred_RF)
#__________________________________________________________
#_______A METAMODELL TANÍTÁSA_____________________________
#Logit meta:
#ensemble <- glm(as.factor(HeartDisease)~., data=heart_train_meta, family = binomial(link="logit"))
#ANN meta:
ensemble <- neuralnet(as.factor(HeartDisease)~., data=heart_train_meta, hidden = 3, linear.output = FALSE)
#__________________________________________________________
#_______BECSLÉS AZ UTSÓ 20%-ON________________________
#ANN becslések
pred_ANN <- predict(ANN_best,ANN_heart_test_meta)[,2] %>% round(3)
pred_ANN <- sapply(pred_ANN,classifier,cut_off=0.5)
#Logit becslések
pred_logit <- predict(logit_selected,heart_test_meta,type="response") %>% round(3)
pred_logit <- as.numeric(sapply(pred_logit,classifier,cut_off=0.5))
#RF becslések
pred_RF<- as.numeric(predict(RF_best,heart_test_meta,type="response"))
#ENSEMBLE BECSLÉS
heart_test_ensemble <- cbind(heart_test_meta[,7],pred_ANN,pred_logit,pred_RF)
pred_ensemble <- predict(ensemble,heart_test_ensemble,type="response") %>% round(3)
pred_ensemble <- as.numeric(sapply(pred_ensemble[,2],classifier,cut_off=0.5))
cfm_ensemble <- confusionMatrix(data = factor(pred_ensemble), reference = factor(heart_test_ensemble$HeartDisease), mode = "prec_recall")
ensemble_Accuracy <- rbind(ensemble_Accuracy,cfm_ensemble$overall[1])
ensemble_Precision <- rbind(ensemble_Precision,cfm_ensemble$byClass[5])
ensemble_Recall <- rbind(ensemble_Recall,cfm_ensemble$byClass[6])
ensemble_F1 <- rbind(ensemble_F1,cfm_ensemble$byClass[7])
}, error=function(e){})
print(paste0(i*100/K,"%"))
}
metrics_ensemble <- cbind(ensemble_Accuracy,ensemble_Precision, ensemble_Recall, ensemble_F1)[2:length(ensemble_Accuracy),]
average_metrics_ensemble <- apply(metrics_ensemble,2,mean)
ANN_Accuracy = array()
ANN_Precision = array()
ANN_Recall = array()
ANN_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Normálás és splittelés
train_index_ANN_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_kesz_train_ANN_best <- ANN_heart_with_dummies[train_index_ANN_best,]
heart_kesz_test_ANN_best <- ANN_heart_with_dummies[-train_index_ANN_best,]
#Neurális háló tanítása
tryCatch({
ANN_best <- neuralnet(as.factor(HeartDisease)~., data = heart_kesz_train_ANN_best,hidden=c(1,1),linear.output = FALSE)
#Becslés
pred_ANN_best <- predict(ANN_best,heart_kesz_test_ANN_best)[,2] %>% round(3)
pred_ANN_best <- sapply(pred_ANN_best,classifier,cut_off=0.5)
#Eredmények feljegyzése
cfm_ANN_best <- confusionMatrix(data = factor(pred_ANN_best), reference = factor(heart_kesz_test_ANN_best[,7]), mode = "prec_recall")
ANN_Accuracy <- rbind(ANN_Accuracy,cfm_ANN_best$overall[1])
ANN_Precision <- rbind(ANN_Precision,cfm_ANN_best$byClass[5])
ANN_Recall <- rbind(ANN_Recall,cfm_ANN_best$byClass[6])
ANN_F1 <- rbind(ANN_F1,cfm_ANN_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(ANN_Accuracy,ANN_Precision, ANN_Recall, ANN_F1)[2:length(ANN_Accuracy),]
average_metrics_ANN_best <- apply(metrics,2,mean,na.rm=TRUE)
average_metrics_ANN_best
RF_Accuracy = array()
RF_Precision = array()
RF_Recall = array()
RF_F1 = array()
for (i in 1:K){
#i. vilagallapot rögzítése a split előtt
set.seed(vilagallapotok[i])
#Splittelés
train_index_RF_best<- createDataPartition(ANN_heart_with_dummies[,7],p=0.8,list = FALSE)
heart_train_RF_best <- heart_with_dummies[train_index_RF_best,]
heart_test_RF_best <- heart_with_dummies[-train_index_RF_best,]
#Neurális háló tanítása
tryCatch({
RF_best <- randomForest(as.factor(HeartDisease)~., data = heart_train_RF_best,mtry=3,maxnodes=13,ntree=10)
#Becslés
pred_RF<- predict(RF_best,heart_test_RF_best,type="response")
#Eredmények feljegyzése
cfm_RF_best <- confusionMatrix(data = factor(pred_RF), reference = factor(heart_test_RF_best$HeartDisease), mode = "prec_recall")
RF_Accuracy <- rbind(RF_Accuracy,cfm_RF_best$overall[1])
RF_Precision <- rbind(RF_Precision,cfm_RF_best$byClass[5])
RF_Recall <- rbind(RF_Recall,cfm_RF_best$byClass[6])
RF_F1 <- rbind(RF_F1,cfm_RF_best$byClass[7])
},
error=function(e){})
print(paste0(i*100/K,"%"))
}
#K soros mérőszám mátrix:
metrics <- cbind(RF_Accuracy,RF_Precision, RF_Recall, RF_F1)[2:length(RF_Accuracy),]
average_metrics_RF_best <- apply(metrics,2,mean)
average_metrics_RF_best
summary_metrics <- rbind(average_metrics_ensemble,average_metrics_RF_best,average_metrics_ANN_best)
summary_metrics
write_xlsx(data.frame(summary_metrics),"summary.xlsx")
write_xlsx(data.frame(summary_metrics),"summary.xlsx")
heartdiseases <- table(heart_kesz$HeartDisease)
barplot(heartdiseases)
average_metrics_logit
